name: Full Spectrum Testing
on:
  push:
    branches:
      - main
  workflow_dispatch:
jobs:
  unit-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"
          cache: "npm"
          cache-dependency-path: "package-lock.json"

      - name: Install dependencies
        run: npm ci

      - name: Run tests with coverage
        run: npx jest --testMatch="**/*.spec.js"

      - name: Upload test results artifact
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: Unit-test-results
          path: |
            reports/junit.xml
            coverage

      - name: Publish Unit Test Report
        uses: dorny/test-reporter@v2
        if: always()
        with:
          name: Unit Tests
          path: reports/junit.xml
          reporter: jest-junit

  integration-test:
    needs: [unit-test]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"
          cache: "npm"
          cache-dependency-path: "package-lock.json"

      - name: Install dependencies
        run: npm ci

      - name: Lanuch server
        run: |
          docker compose up -d --build
          npx wait-port http://localhost:3000/health -t 30000

      - name: Run integration tests
        run: npx jest --testMatch="**/*.int.test.js"

      - name: Stop server
        run: docker compose down

      - name: Upload test results artifact
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: Integration-tets-results
          path: |
            reports/junit.xml

      - name: Publish Integration Test Report
        uses: dorny/test-reporter@v2
        if: always()
        with:
          name: Integration Tests
          path: reports/junit.xml
          reporter: jest-junit

  api-test:
    needs: [unit-test, integration-test]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"
          cache: "npm"
          cache-dependency-path: "package-lock.json"

      - name: Install dependencies
        run: npm ci

      - name: Lanuch server
        run: |
          docker compose up -d --build
          npx wait-port http://localhost:3000/health -t 30000

      - name: Run API tests
        working-directory: ./test-api
        run: npx newman run Book-App.postman_collection.json

      - name: Stop server
        run: docker compose down

  k6-perf-test:
    needs: [unit-test, integration-test, api-test]
    runs-on: ubuntu-latest
    steps:
      - name: Trigger K6 Tests
        id: trigger
        run: |
          echo " Triggering K6 workflow on k6-performance-test repo"
          curl -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.REPO_ACCESS_TOKEN }}" \
            https://api.github.com/repos/hossainks/k6-performance-test/dispatches \
            -d '{"event_type":"run-k6-tests"}'

          # Wait for the workflow to start
          sleep 15 

          # Get the latest run id triggered by repository_dispatch
          run_id=$(
          curl -s -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer ${{ secrets.REPO_ACCESS_TOKEN }}" \
              "https://api.github.com/repos/hossainks/k6-performance-test/actions/runs?event=repository_dispatch" \
          | jq -r '.workflow_runs | sort_by(.created_at) | last.id')

          echo "run_id=$run_id" >> $GITHUB_OUTPUT

      - name: Wait for K6 Workflow to Complete
        run: |
          echo "‚è≥ Waiting for K6 workflow run ${{ steps.trigger.outputs.run_id }} to complete..."

          MAX_ATTEMPTS=40
          SLEEP_TIME=5
          ATTEMPT=1
          run_id="${{ steps.trigger.outputs.run_id }}"
          run_url="https://github.com/hossainks/k6-performance-test/actions/runs/$run_id"

          while [ $ATTEMPT -le $MAX_ATTEMPTS ]; do
            run=$(curl -s -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer ${{ secrets.REPO_ACCESS_TOKEN }}" \
              "https://api.github.com/repos/hossainks/k6-performance-test/actions/runs/$run_id")

            status=$(echo "$run" | jq -r '.status')
            conclusion=$(echo "$run" | jq -r '.conclusion')

            echo "Attempt $ATTEMPT/$MAX_ATTEMPTS - Status: $status, Conclusion: $conclusion"

            if [ "$status" == "completed" ]; then
              if [ "$conclusion" == "success" ]; then
                echo " ‚úÖ K6 workflow finished successfully!"
                echo "üîó Workflow URL: $run_url"
                exit 0
              else
                echo " ‚ùå K6 workflow failed!"
                echo "üîó Workflow URL: $run_url"
                exit 1
              fi
            fi

            ATTEMPT=$((ATTEMPT+1))
            sleep $SLEEP_TIME
          done

          echo "‚ùå Timeout waiting for K6 workflow"
          exit 1
